'''Para reproducir este script será necesario instalar as bibliotecas numpy e matplotlib'''
import numpy as np                          #Biblioteca para operacao matematica
import matplotlib.pyplot as plt             #Para plotar  

def xfunction_analitico1(K,sigma1): 
    ax=100              
    a0=np.sqrt(2*(sigma1**2)*K) 
    r=np.linspace(0, 10, num=ax).reshape(ax,1) #Tansforma em matriz columna para facilitar a multiplicaçao
    pr=(r/sigma1**2)*(np.exp(-K))*(np.exp(-(r**2)/(2*(sigma1**2))))*np.i0((r*a0)/(sigma1**2)) #Expressao encontrada    
    return pr 

def xfunction_numeric(mu, size, sigma1, K): 
    a0=np.sqrt(2*(sigma1**2)*K)    
    xy_a0= a0 + np.random.normal(mu, (sigma1), size=(size, 2)).view(np.complex128) #deragao da dua VA x e jy... 
    Sv=np.abs(xy_a0)    #Calcula o modulo 
    media=np.mean(Sv)    # calcula a media
    variancia=np.var(Sv)  # calcula variancia
    return Sv , media, variancia

def xfunction_principal():
    mu=0
    sigma1=1
    Analitico=[]
    Numeric=[]
    size=10**6
    K=[0, 0.125, 0.5, 2, 8]
    for K in K: 
        analitic=xfunction_analitico1(K,sigma1)
        numeric=xfunction_numeric(mu ,size, (sigma1), K)[0] 
        Analitico.append(analitic[:])
        Numeric.append(numeric[:])
        analitic=[]
        numeric=[]
    return Analitico, Numeric

media0=xfunction_numeric(0 ,10**6, 1, 0)[1]
media1=xfunction_numeric(0 ,10**6, 1, 1)[1]  
Variancia0=xfunction_numeric(0 ,10**6, 1, 0)[2]
Variancia1=xfunction_numeric(0 ,10**6, 1, 1)[2]  
print(f'Para σ = 1, μ=0 e k=0: a media de p(r) é {media0}')
print(f'Para σ = 1, μ=0 e k=1: a media de p(r) é {media1}')
print(f'Para σ = 1, μ=0 e k=0: a Variância de p(r) é {Variancia0}')
print(f'Para σ = 1, μ=0 e k=1: a Variância de p(r) é {Variancia1}') 

A=xfunction_principal() 
ax=100
r=np.linspace(0,10, num=ax).reshape(ax,1) 
plt.plot(r, A[0][0], 'b', label='K=0') # plot da expressao encontrada
plt.plot(r, A[0][1], 'g', label='K=0.125') 
plt.plot(r, A[0][2], 'k', label='K=0.5') 
plt.plot(r, A[0][3], 'r', label='K=2') 
plt.plot(r, A[0][4], 'm', label='K=8') 
plt.hist(A[1][0], color ='b', bins=100, density=True)   # histograma da variavel gerada.
plt.hist(A[1][1], color ='g', bins=100, density=True)    
plt.hist(A[1][2], color ='k', bins=100, density=True)    
plt.hist(A[1][3], color ='r', bins=100, density=True)    
plt.hist(A[1][4], color ='m', bins=100, density=True)  
plt.title("Probability density function  distributions Rice for σ = 1",  )
plt.xlabel('r')
plt.ylabel('p(r)')
plt.legend()
plt.show()